// Code generated by MockGen. DO NOT EDIT.
// Source: model.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	data "github.com/pavlegich/gophkeeper/internal/server/domains/data"
)

// MockDataService is a mock of Service interface.
type MockDataService struct {
	ctrl     *gomock.Controller
	recorder *MockDataServiceMockRecorder
}

// MockDataServiceMockRecorder is the mock recorder for MockDataService.
type MockDataServiceMockRecorder struct {
	mock *MockDataService
}

// NewMockDataService creates a new mock instance.
func NewMockDataService(ctrl *gomock.Controller) *MockDataService {
	mock := &MockDataService{ctrl: ctrl}
	mock.recorder = &MockDataServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataService) EXPECT() *MockDataServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDataService) Create(ctx context.Context, data *data.Data) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDataServiceMockRecorder) Create(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDataService)(nil).Create), ctx, data)
}

// Delete mocks base method.
func (m *MockDataService) Delete(ctx context.Context, dType, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, dType, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDataServiceMockRecorder) Delete(ctx, dType, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDataService)(nil).Delete), ctx, dType, name)
}

// Edit mocks base method.
func (m *MockDataService) Edit(ctx context.Context, data *data.Data) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockDataServiceMockRecorder) Edit(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockDataService)(nil).Edit), ctx, data)
}

// Unload mocks base method.
func (m *MockDataService) Unload(ctx context.Context, dType, name string) (*data.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unload", ctx, dType, name)
	ret0, _ := ret[0].(*data.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unload indicates an expected call of Unload.
func (mr *MockDataServiceMockRecorder) Unload(ctx, dType, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unload", reflect.TypeOf((*MockDataService)(nil).Unload), ctx, dType, name)
}

// MockDataRepository is a mock of Repository interface.
type MockDataRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDataRepositoryMockRecorder
}

// MockDataRepositoryMockRecorder is the mock recorder for MockDataRepository.
type MockDataRepositoryMockRecorder struct {
	mock *MockDataRepository
}

// NewMockDataRepository creates a new mock instance.
func NewMockDataRepository(ctrl *gomock.Controller) *MockDataRepository {
	mock := &MockDataRepository{ctrl: ctrl}
	mock.recorder = &MockDataRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataRepository) EXPECT() *MockDataRepositoryMockRecorder {
	return m.recorder
}

// CreateData mocks base method.
func (m *MockDataRepository) CreateData(ctx context.Context, data *data.Data) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateData", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateData indicates an expected call of CreateData.
func (mr *MockDataRepositoryMockRecorder) CreateData(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateData", reflect.TypeOf((*MockDataRepository)(nil).CreateData), ctx, data)
}

// DeleteDataByName mocks base method.
func (m *MockDataRepository) DeleteDataByName(ctx context.Context, dType, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataByName", ctx, dType, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDataByName indicates an expected call of DeleteDataByName.
func (mr *MockDataRepositoryMockRecorder) DeleteDataByName(ctx, dType, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataByName", reflect.TypeOf((*MockDataRepository)(nil).DeleteDataByName), ctx, dType, name)
}

// GetDataByName mocks base method.
func (m *MockDataRepository) GetDataByName(ctx context.Context, dType, name string) (*data.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataByName", ctx, dType, name)
	ret0, _ := ret[0].(*data.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataByName indicates an expected call of GetDataByName.
func (mr *MockDataRepositoryMockRecorder) GetDataByName(ctx, dType, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataByName", reflect.TypeOf((*MockDataRepository)(nil).GetDataByName), ctx, dType, name)
}

// UpdateData mocks base method.
func (m *MockDataRepository) UpdateData(ctx context.Context, data *data.Data) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateData", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateData indicates an expected call of UpdateData.
func (mr *MockDataRepositoryMockRecorder) UpdateData(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateData", reflect.TypeOf((*MockDataRepository)(nil).UpdateData), ctx, data)
}
